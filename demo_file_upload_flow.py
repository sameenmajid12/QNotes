#!/usr/bin/env python3
"""
10Q Notes AI - File Upload Flow Demo
HackRU 2025 Project by azrabano

This script demonstrates what happens when you initially upload a file
to the 10Q Notes AI system.
"""

import requests
import json
import time

def demo_file_upload_flow():
    """Demonstrate the complete file upload flow"""
    print("🔹 10Q Notes AI - File Upload Flow Demo")
    print("=" * 80)
    print("This shows what happens when you initially upload a SEC filing")
    print("=" * 80)
    
    # Step 1: Student Authentication
    print("\n📝 STEP 1: Student Authentication")
    print("-" * 50)
    
    auth_response = requests.post('http://localhost:8000/api/auth/login')
    if auth_response.status_code == 200:
        auth_data = auth_response.json()
        student = auth_data['student']
        print(f"✅ Student: {student['name']} ({student['email']})")
        print(f"   University: {student['university']}")
        print(f"   Previous Sessions: {student['total_sessions']}")
        print(f"   Average Score: {student['average_score']}")
    else:
        print(f"❌ Authentication failed: {auth_response.status_code}")
        return
    
    # Step 2: File Upload
    print("\n📁 STEP 2: File Upload")
    print("-" * 50)
    
    upload_response = requests.post('http://localhost:8000/api/upload/filing')
    if upload_response.status_code == 200:
        upload_data = upload_response.json()
        session = upload_data['session']
        print(f"✅ File uploaded successfully!")
        print(f"   Company: {session['company_name']}")
        print(f"   Ticker: {session['ticker']}")
        print(f"   Filing Type: {session['filing_type']}")
        print(f"   Period: {session['filing_period']}")
        print(f"   Session ID: {session['session_id']}")
        print(f"   Status: {session['status']}")
        print(f"\n💬 Message: {upload_data['message']}")
    else:
        print(f"❌ Upload failed: {upload_response.status_code}")
        return
    
    # Step 3: Enter Learn Mode (What you see after upload)
    print("\n📖 STEP 3: Learn Mode - AI-Generated SMAP Notes")
    print("-" * 50)
    print("After uploading, you enter Learn Mode where AI has generated SMAP notes")
    print("from the SEC filing. Here's what you see:")
    
    learn_response = requests.post('http://localhost:8000/api/session/demo123/learn')
    if learn_response.status_code == 200:
        learn_data = learn_response.json()
        content = learn_data['content']
        
        print(f"\n🏢 Company Information:")
        print(f"   Name: {content['company_info']['name']}")
        print(f"   Ticker: {content['company_info']['ticker']}")
        print(f"   Industry: {content['company_info']['industry']}")
        print(f"   Period: {content['company_info']['period']}")
        
        print(f"\n📊 Progress Status:")
        print(f"   Sections Available: {content['progress_status']['sections_available']}")
        print(f"   Estimated Time: {content['progress_status']['estimated_time']}")
        print(f"   Difficulty Level: {content['progress_status']['difficulty_level']}")
        
        print(f"\n🎯 SMAP Sections Generated by AI:")
        print("=" * 60)
        
        sections = content['sections']
        for section_id, section_data in sections.items():
            print(f"\n📋 {section_data['title']}")
            print(f"   Explanation: {section_data['explanation']}")
            print(f"   Content: {section_data['content']}")
            print(f"   Key Concepts: {', '.join(section_data['key_concepts'])}")
            
            if 'hover_definitions' in section_data:
                print(f"   Hover Definitions:")
                for term, definition in section_data['hover_definitions'].items():
                    print(f"     • {term}: {definition}")
        
        print(f"\n🎯 Learning Features Available:")
        features = learn_data['features']
        for feature, available in features.items():
            status = "✅" if available else "❌"
            print(f"   {status} {feature.replace('_', ' ').title()}")
    
    # Step 4: Show what the AI actually extracted
    print(f"\n🤖 STEP 4: What the AI Actually Extracted")
    print("-" * 50)
    print("The AI used Gemini to analyze the SEC filing and extract:")
    print()
    print("📊 SUBJECTIVE (Management's Voice):")
    print("   • Management tone and confidence level")
    print("   • Strategic priorities and focus areas")
    print("   • Forward-looking statements and guidance")
    print("   • Qualitative insights from leadership")
    print()
    print("📈 METRICS (Financial Numbers):")
    print("   • Revenue, profit, and growth rates")
    print("   • Key financial ratios (ROE, margins, etc.)")
    print("   • Balance sheet strength indicators")
    print("   • Per-share metrics and comparisons")
    print()
    print("🧠 ASSESSMENT (What It Means):")
    print("   • Trend analysis and performance interpretation")
    print("   • Competitive positioning insights")
    print("   • Risk factor identification")
    print("   • Growth driver analysis")
    print()
    print("📋 PLAN (Next Steps):")
    print("   • Specific monitoring priorities")
    print("   • Investment decision recommendations")
    print("   • Risk management actions")
    print("   • Key metrics to track")
    
    # Step 5: Show the Gemini prompt that was used
    print(f"\n🔍 STEP 5: The AI Prompt Used")
    print("-" * 50)
    print("The system used this prompt with Gemini API:")
    print()
    print("""
    Generate comprehensive SMAP notes for this SEC filing:
    
    [SEC Filing Text - First 12,000 characters]
    
    **SUBJECTIVE (S):**
    [Management tone, strategic priorities, forward-looking statements]
    
    **METRICS (M):**
    [Key financial numbers, ratios, YoY changes]
    
    **ASSESSMENT (A):**
    [Connect metrics to business performance, identify trends and risks]
    
    **PLAN (P):**
    [Specific actionable next steps for investors/analysts]
    """)
    
    print(f"\n🎯 STEP 6: What Happens Next")
    print("-" * 50)
    print("After seeing the AI-generated SMAP notes, you can:")
    print()
    print("1. 📖 Learn Mode: Study the AI's analysis with hover definitions")
    print("2. ✍️ Practice Mode: Write your own SMAP notes")
    print("3. 🎯 Feedback Mode: Get detailed feedback on your work")
    print("4. 🎤 Voice Agent: Listen to earnings call simulation")
    print("5. 📊 Comparison: See how your work compares to AI's analysis")
    
    print(f"\n🎉 File Upload Flow Complete!")
    print("=" * 80)
    print("The system successfully:")
    print("✅ Authenticated the student")
    print("✅ Processed the SEC filing")
    print("✅ Generated SMAP notes using Gemini AI")
    print("✅ Prepared interactive learning content")
    print("✅ Made voice agent features available")
    print("🚀 Ready for HackRU 2025 demonstration!")

if __name__ == "__main__":
    demo_file_upload_flow()
